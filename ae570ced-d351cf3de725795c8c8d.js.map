{"version":3,"sources":["webpack:///./src/pages/resume.tsx"],"names":["InlineList","SkillList","ContributionList","styles","mediaPrint","DefineList","clearFix","UnorderedList","WorkList","OpenSourceContributionList","OpenSourceNameLink","ContributionLink","IssueLink","PullRequestLink","SectionParagraph","related_links","require","skills","work_experiences","organizations","projects","opensource_contributions","activities","disabilities","ResumePage","location","metadata","data","site","siteMetadata","lineCount","page_name","property","typeof","content","href","map","link","key","name","url","skill","items","item","index","work","target","breaking","descriptions","desc","length","reduce","p","c","position","started_at","ended_at","org","project","repo_url","contrib","Cls","type","number","activity","date","description","disablity","name_en","title","i"],"mappings":"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","file":"ae570ced-d351cf3de725795c8c8d.js","sourcesContent":["import styled from '@emotion/styled';\nimport { graphql } from 'gatsby';\nimport clearFix from 'polished/lib/mixins/clearFix';\nimport React from 'react';\n\nimport Layout from '../components/Layout';\nimport {\n  PageBreak,\n  Section,\n  SectionTitle,\n  SubSection,\n  SubSectionTitle,\n} from '../components/Section';\nimport SEO from '../components/SEO';\nimport styles from '../utils/styles';\n\nconst InlineList = styled.ul`\n  display: inline-block;\n  margin: 0;\n  padding: 0;\n\n  li {\n    display: inline-block;\n    margin-right: 3px;\n\n    &::after {\n      content: ',';\n    }\n\n    &:last-child::after {\n      content: '';\n    }\n  }\n`;\nconst SkillList = styled(InlineList)`\n  margin-left: 2.5rem;\n  margin-right: 2.5rem;\n`;\nconst ContributionList = styled(InlineList)`\n  li {\n    margin-right: 0.25rem;\n  }\n  li::after {\n    content: none;\n  }\n\n  ${styles.mediaPrint} {\n    li::after {\n      content: ',';\n    }\n    li:last-child::after {\n      content: none;\n    }\n  }\n`;\nconst DefineList = styled.dl`\n  ${clearFix()}\n\n  > dt {\n    float: left;\n    font-weight: bold;\n    margin-right: 5px;\n    text-align: right;\n    width: 120px;\n\n    &::after {\n      content: ':';\n    }\n  }\n\n  > dd {\n    float: left;\n    width: calc(100% - 120px - 5px);\n  }\n`;\nconst UnorderedList = styled.ul`\n  margin-left: 2.5rem;\n  margin-right: 2.5rem;\n`;\nconst WorkList = styled.ul`\n  margin-top: 1.5rem;\n`;\nconst OpenSourceContributionList = styled.ul`\n  margin-left: 2.5rem;\n  margin-right: 2.5rem;\n`;\nconst OpenSourceNameLink = styled.a`\n  margin-right: 1rem;\n  margin-right: 1rem;\n`;\nconst ContributionLink = styled.a`\n  color: white;\n  border-radius: 0.2rem;\n  font-size: 0.75rem;\n  font-weight: bold;\n  padding: 0.15rem 0.25rem;\n  text-decoration: none;\n\n  &:hover {\n    color: white;\n  }\n\n  ${styles.mediaPrint} {\n    padding: 0;\n  }\n`;\nconst IssueLink = styled(ContributionLink)`\n  background: #5bc0de;\n\n  ${styles.mediaPrint} {\n    background: none;\n    color: #5bc0de;\n  }\n\n  &::before {\n    content: 'ISSUE ';\n  }\n`;\nconst PullRequestLink = styled(ContributionLink)`\n  background: #5cb85c;\n\n  ${styles.mediaPrint} {\n    background: none;\n    color: #5cb85c;\n  }\n\n  &::before {\n    content: 'PR ';\n  }\n`;\nconst SectionParagraph = styled.p`\n  margin-left: 1.5rem;\n`;\n\ninterface ResumePageProps extends PageProps {\n  data: {\n    site: SiteMetadataWrapper;\n  };\n}\ninterface RelatedLink {\n  name: string;\n  url: string;\n}\ninterface SkillItem {\n  name: string;\n  url: string;\n}\ninterface Skill {\n  name: string;\n  items: SkillItem[];\n}\ninterface WorkExperience {\n  name: string;\n  url?: string;\n  position: string;\n  started_at: string;\n  ended_at: string;\n  descriptions: string[];\n  skills: string[];\n}\ninterface Organization {\n  name: string;\n  url: string;\n  started_at: string;\n  ended_at: string;\n  descriptions: string[];\n  skills: string[];\n}\ninterface Project {\n  name: string;\n  url?: string;\n  repo_url?: string;\n  started_at: string;\n  ended_at: string;\n  descriptions: string[];\n  skills: string[];\n}\ninterface Contribution {\n  type: 'issue' | 'pr';\n  url: string;\n  number: string;\n}\ninterface OpenSource {\n  name: string;\n  url: string;\n  items: Contribution[];\n}\ninterface Activity {\n  name: string;\n  url?: string;\n  date: string;\n  description: string;\n}\ninterface Disability {\n  name: string;\n  name_en: string;\n  url: string;\n  descriptions: string[];\n}\n\nconst related_links: RelatedLink[] = require('../data/related_links.json');\nconst skills: Skill[] = require('../data/skills.json');\nconst work_experiences: WorkExperience[] = require('../data/work_experiences.json');\nconst organizations: Organization[] = require('../data/organizations.json');\nconst projects: Project[] = require('../data/projects.json');\nconst opensource_contributions: OpenSource[] = require('../data/contributions.json');\nconst activities: Activity[] = require('../data/activities.json');\nconst disabilities: Disability[] = require('../data/disabilities.json');\n\nconst ResumePage: React.FC<ResumePageProps> = ({\n  location,\n  data: {\n    site: { siteMetadata: metadata },\n  },\n}) => {\n  let lineCount = 0;\n  return (\n    <Layout location={location} metadata={metadata}>\n      <SEO page_name='Résumé' location={location} />\n      <section property='mainEntity' typeof='ProfilePage'>\n        <h1 property='mainContentOfPage'>Résumé</h1>\n        <meta property='inLanguage' content='ko-KR' />\n        <div property='about author mainEntity' typeof='Person'>\n          <Section>\n            <SectionTitle>Jinsu Kim</SectionTitle>\n            <DefineList>\n              <dt>Name</dt>\n              <dd property='name'>김진수</dd>\n              <dt>ID/Nickname</dt>\n              <dd>item4</dd>\n              <dt>Addr</dt>\n              <dd property='address' typeof='PostalAddress'>\n                <meta property='addressCountry' content='KR' />\n                <span property='addressLocality'>경기도 부천시</span>\n              </dd>\n              <dt>Email</dt>\n              <dd>\n                <a href='mailto:resume@jinsu.kim' property='email'>\n                  resume@jinsu.kim\n                </a>\n              </dd>\n              <dt>Objective</dt>\n              <dd property='jobTitle'>웹 개발자</dd>\n              <dt>Links</dt>\n              <dd>\n                <InlineList>\n                  {related_links.map(link => (\n                    <li key={link.name}>\n                      <a href={link.url} property='url'>\n                        {link.name}\n                      </a>\n                    </li>\n                  ))}\n                </InlineList>\n              </dd>\n            </DefineList>\n          </Section>\n          <Section>\n            <SectionTitle>Summary</SectionTitle>\n            <SectionParagraph>\n              빠르게 성장하는 스타트업에서 백엔드 위주로 프론트까지 개발이\n              가능한 풀스택 지향 개발자. 전통적인서버, 범용 클라우드, Docker를\n              이용하여 테스트, CI, 배포, 모니터링등 전반적인 서비스 영역을\n              경험하고 개선이 가능. 다만 음성언어로 의사소통이 곤란하고 심리적\n              안정감이 낮은 환경에서의 근로에 어려움이 있음.\n            </SectionParagraph>\n          </Section>\n          <Section typeof='ItemList'>\n            <SectionTitle>Skills</SectionTitle>\n            {skills.map(skill => {\n              return (\n                <SubSection key={skill.name}>\n                  <SubSectionTitle property='name'>\n                    {skill.name}\n                  </SubSectionTitle>\n                  <SkillList>\n                    {skill.items.map((item, index) => {\n                      return (\n                        <li key={index}>\n                          <meta property='position' content={`${index}`} />\n                          <a href={item.url} property='item' typeof='Webpage'>\n                            <meta property='url' content={item.url} />\n                            <span property='name'>{item.name}</span>\n                          </a>\n                        </li>\n                      );\n                    })}\n                  </SkillList>\n                </SubSection>\n              );\n            })}\n          </Section>\n          <PageBreak />\n          <Section>\n            <SectionTitle>Work Experiences</SectionTitle>\n            {work_experiences.map(work => {\n              const name = work.url ? (\n                <a property='url' href={work.url} target='_blank'>\n                  <span property='name'>{work.name}</span>\n                </a>\n              ) : (\n                <span property='name'>{work.name}</span>\n              );\n              lineCount +=\n                4 +\n                work.descriptions\n                  .map(desc => (desc.length / 40) | 0)\n                  .reduce((p, c) => p + c, 0);\n              let breaking = false;\n              if (lineCount >= 18) {\n                breaking = true;\n                lineCount = 0;\n              }\n              return (\n                <>\n                  <SubSection\n                    property='worksFor'\n                    typeof='Organization'\n                    key={work.name}\n                  >\n                    <SubSectionTitle>{name}</SubSectionTitle>\n                    <DefineList>\n                      <dt>포지션</dt>\n                      <dd>{work.position}</dd>\n                      <dt>근무기간</dt>\n                      <dd>\n                        <time property='startDate'>{work.started_at}</time>부터{' '}\n                        <time>{work.ended_at}</time>까지\n                      </dd>\n                      <dt>업무내용</dt>\n                      <dd>\n                        <WorkList>\n                          {work.descriptions.map((desc, index) => (\n                            <li key={index}>{desc}</li>\n                          ))}\n                        </WorkList>\n                      </dd>\n                      <dt>사용된 기술</dt>\n                      <dd>\n                        <InlineList>\n                          {work.skills.map(skill => (\n                            <li key={skill}>{skill}</li>\n                          ))}\n                        </InlineList>\n                      </dd>\n                    </DefineList>\n                  </SubSection>\n                  {breaking ? <PageBreak /> : null}\n                </>\n              );\n            })}\n          </Section>\n          <Section>\n            <SectionTitle>Organizations</SectionTitle>\n            {organizations.map(org => {\n              const name = org.url ? (\n                <a property='url' href={org.url} target='_blank'>\n                  <span property='name'>{org.name}</span>\n                </a>\n              ) : (\n                <span property='name'>{org.name}</span>\n              );\n              lineCount +=\n                4 +\n                org.descriptions\n                  .map(desc => (desc.length / 40) | 0)\n                  .reduce((p, c) => p + c, 0);\n              let breaking = false;\n              if (lineCount >= 18) {\n                breaking = true;\n                lineCount = 0;\n              }\n              return (\n                <>\n                  <SubSection\n                    key={org.name}\n                    property='affiliation'\n                    typeof='Organization'\n                  >\n                    <SubSectionTitle>{name}</SubSectionTitle>\n                    <DefineList>\n                      <dt>소속기간</dt>\n                      <dd>\n                        <time property='startDate'>{org.started_at}</time>부터{' '}\n                        <time>{org.ended_at}</time>까지\n                      </dd>\n                      <dt>활동내용</dt>\n                      <dd>\n                        <WorkList>\n                          {org.descriptions.map((desc, index) => (\n                            <li key={index}>{desc}</li>\n                          ))}\n                        </WorkList>\n                      </dd>\n                      <dt>사용된 기술</dt>\n                      <dd>\n                        <InlineList>\n                          {org.skills.map(skill => (\n                            <li key={skill}>{skill}</li>\n                          ))}\n                        </InlineList>\n                      </dd>\n                    </DefineList>\n                  </SubSection>\n                  {breaking ? <PageBreak /> : null}\n                </>\n              );\n            })}\n          </Section>\n          <Section>\n            <SectionTitle>Participated Projects</SectionTitle>\n            {projects.map((project, index) => {\n              const name = project.url ? (\n                <a property='url' href={project.url} target='_blank'>\n                  <span property='name'>{project.name}</span>\n                </a>\n              ) : (\n                <span property='name'>{project.name}</span>\n              );\n              lineCount +=\n                4 +\n                project.descriptions\n                  .map(desc => (desc.length / 40) | 0)\n                  .reduce((p, c) => p + c, 0);\n              let breaking = false;\n              if (\n                (index === 0 && lineCount >= 18) ||\n                (index > 0 && lineCount >= 20)\n              ) {\n                breaking = true;\n                lineCount = 0;\n              }\n              return (\n                <>\n                  <SubSection key={project.name}>\n                    <SubSectionTitle>{name}</SubSectionTitle>\n                    <DefineList>\n                      {project.repo_url ? (\n                        <>\n                          <dt>저장소</dt>\n                          <dd>\n                            <a href={project.repo_url} target='_blank'>\n                              {project.repo_url}\n                            </a>\n                          </dd>\n                        </>\n                      ) : null}\n                      <dt>참여기간</dt>\n                      <dd>\n                        <time property='startDate'>{project.started_at}</time>\n                        부터 <time>{project.ended_at}</time>까지\n                      </dd>\n                      <dt>프로젝트 소개</dt>\n                      <dd>\n                        <WorkList>\n                          {project.descriptions.map((desc, index) => (\n                            <li key={index}>{desc}</li>\n                          ))}\n                        </WorkList>\n                      </dd>\n                      <dt>사용된 기술</dt>\n                      <dd>\n                        <InlineList>\n                          {project.skills.map(skill => (\n                            <li key={skill}>{skill}</li>\n                          ))}\n                        </InlineList>\n                      </dd>\n                    </DefineList>\n                  </SubSection>\n                  {breaking ? <PageBreak /> : null}\n                </>\n              );\n            })}\n          </Section>\n          <Section>\n            <SectionTitle>Open-Source Contributions</SectionTitle>\n            <OpenSourceContributionList>\n              {opensource_contributions.map((contrib, index) => {\n                return (\n                  <li key={index}>\n                    <OpenSourceNameLink href={contrib.url} target='_blank'>\n                      {contrib.name}\n                    </OpenSourceNameLink>\n                    <ContributionList>\n                      {contrib.items.map(item => {\n                        const Cls =\n                          item.type === 'pr' ? PullRequestLink : IssueLink;\n                        return (\n                          <li key={item.number}>\n                            <Cls href={item.url}>{item.number}</Cls>\n                          </li>\n                        );\n                      })}\n                    </ContributionList>\n                  </li>\n                );\n              })}\n            </OpenSourceContributionList>\n          </Section>\n          <PageBreak />\n          <Section>\n            <SectionTitle>Activities</SectionTitle>\n            {activities.map((activity, index) => {\n              const name = activity.url ? (\n                <a href={activity.url} target='_blank'>\n                  {activity.name}\n                </a>\n              ) : (\n                activity.name\n              );\n              return (\n                <SubSection key={index}>\n                  <SubSectionTitle>{name}</SubSectionTitle>\n                  <p>\n                    <time>({activity.date}) </time>\n                    {activity.description}\n                  </p>\n                </SubSection>\n              );\n            })}\n          </Section>\n          <Section>\n            <SectionTitle>Disabilities</SectionTitle>\n            <SectionParagraph>\n              저는 다음과 같은 문제들로 정기적으로 병원 진료를 받고 있습니다.\n            </SectionParagraph>\n            {disabilities.map((disablity, index) => {\n              const name = `${disablity.name} (${disablity.name_en})`;\n              const title = disablity.url ? (\n                <a href={disablity.url} target='_blank'>\n                  {name}\n                </a>\n              ) : (\n                name\n              );\n              return (\n                <SubSection key={index}>\n                  <SubSectionTitle>{title}</SubSectionTitle>\n                  <UnorderedList>\n                    {disablity.descriptions.map((desc, i) => (\n                      <li key={i}>{desc}</li>\n                    ))}\n                  </UnorderedList>\n                </SubSection>\n              );\n            })}\n          </Section>\n        </div>\n      </section>\n    </Layout>\n  );\n};\nexport default ResumePage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        siteUrl\n        title\n        description\n        tags\n        socials {\n          twitter\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}